# HW4 from MITx: 14.310x Data Analysis for Social Scientists

##### Random draws #####

# Preliminaries
rm(list = ls())
library("utils")
library("tidyverse")
library(dplyr)
library(ggplot2)
library(stringr)

u <- runif(1000)

hist(qnorm(u), breaks=50)


# Subastas AUCTIONS -- Optativos HW 4


#Preliminaries
rm(list = ls())
setwd("---------------------------------------")

#Uniform Valuations
number_of_bidders <- 2
number_of_simulations <- 1000

set.seed(1)
valuations1 <- matrix(runif(
  number_of_bidders*number_of_simulations, min=0, max=1),
  nrow = number_of_simulations)


max(valuations1)



# Uniform Valuations - posted price model V=10000

number_of_bidders <- 2
N <- number_of_bidders
V <- 10000

set.seed(5)
valuations <- matrix(runif(N*V, min = 0, max = 1), nrow = V)

maximum_valuation <- apply(valuations, 1, max)
optimal_price <- 1/((N+1)^(1/N))
expected_revenue <- (N/(N+1))*(1/((N+1)^(1/N)))

revenue <- optimal_price*(maximum_valuation >= optimal_price)
print(mean(revenue))
print(expected_revenue)




# Uniform Valuations - posted price model V=1000

number_of_bidders <- 2
N <- number_of_bidders
V <- 1000

set.seed(5)
valuations <- matrix(runif(N*V, min = 0, max = 1), nrow = V)

maximum_valuation <- apply(valuations, 1, max)
optimal_price <- 1/((N+1)^(1/N))
expected_revenue <- (N/(N+1))*(1/((N+1)^(1/N)))

revenue <- optimal_price*(maximum_valuation >= optimal_price)
print(mean(revenue))
print(expected_revenue)



# Uniform Valuations - posted price model V=100

number_of_bidders <- 2
N <- number_of_bidders
V <- 100

set.seed(5)
valuations <- matrix(runif(N*V, min = 0, max = 1), nrow = V)

maximum_valuation <- apply(valuations, 1, max)
optimal_price <- 1/((N+1)^(1/N))
expected_revenue <- (N/(N+1))*(1/((N+1)^(1/N)))

revenue <- optimal_price*(maximum_valuation >= optimal_price)
print(mean(revenue))
print(expected_revenue)




# Uniform Valuations - posted price model V=10

number_of_bidders <- 2
N <- number_of_bidders
V <- 10

set.seed(5)
valuations <- matrix(runif(N*V, min = 0, max = 1), nrow = V)

maximum_valuation <- apply(valuations, 1, max)
optimal_price <- 1/((N+1)^(1/N))
expected_revenue <- (N/(N+1))*(1/((N+1)^(1/N)))

revenue <- optimal_price*(maximum_valuation >= optimal_price)
print(mean(revenue))
print(expected_revenue)
